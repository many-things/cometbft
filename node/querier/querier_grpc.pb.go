// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: querier.proto

package querier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CosmosIndexerClient is the client API for CosmosIndexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosmosIndexerClient interface {
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlockStreamFrom(ctx context.Context, opts ...grpc.CallOption) (CosmosIndexer_GetBlockStreamFromClient, error)
}

type cosmosIndexerClient struct {
	cc grpc.ClientConnInterface
}

func NewCosmosIndexerClient(cc grpc.ClientConnInterface) CosmosIndexerClient {
	return &cosmosIndexerClient{cc}
}

func (c *cosmosIndexerClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/querier.CosmosIndexer/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosmosIndexerClient) GetBlockStreamFrom(ctx context.Context, opts ...grpc.CallOption) (CosmosIndexer_GetBlockStreamFromClient, error) {
	stream, err := c.cc.NewStream(ctx, &CosmosIndexer_ServiceDesc.Streams[0], "/querier.CosmosIndexer/GetBlockStreamFrom", opts...)
	if err != nil {
		return nil, err
	}
	x := &cosmosIndexerGetBlockStreamFromClient{stream}
	return x, nil
}

type CosmosIndexer_GetBlockStreamFromClient interface {
	Send(*GetBlockRequest) error
	Recv() (*GetBlockResponse, error)
	grpc.ClientStream
}

type cosmosIndexerGetBlockStreamFromClient struct {
	grpc.ClientStream
}

func (x *cosmosIndexerGetBlockStreamFromClient) Send(m *GetBlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cosmosIndexerGetBlockStreamFromClient) Recv() (*GetBlockResponse, error) {
	m := new(GetBlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CosmosIndexerServer is the server API for CosmosIndexer service.
// All implementations must embed UnimplementedCosmosIndexerServer
// for forward compatibility
type CosmosIndexerServer interface {
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	GetBlockStreamFrom(CosmosIndexer_GetBlockStreamFromServer) error
	mustEmbedUnimplementedCosmosIndexerServer()
}

// UnimplementedCosmosIndexerServer must be embedded to have forward compatible implementations.
type UnimplementedCosmosIndexerServer struct {
}

func (UnimplementedCosmosIndexerServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedCosmosIndexerServer) GetBlockStreamFrom(CosmosIndexer_GetBlockStreamFromServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlockStreamFrom not implemented")
}
func (UnimplementedCosmosIndexerServer) mustEmbedUnimplementedCosmosIndexerServer() {}

// UnsafeCosmosIndexerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CosmosIndexerServer will
// result in compilation errors.
type UnsafeCosmosIndexerServer interface {
	mustEmbedUnimplementedCosmosIndexerServer()
}

func RegisterCosmosIndexerServer(s grpc.ServiceRegistrar, srv CosmosIndexerServer) {
	s.RegisterService(&CosmosIndexer_ServiceDesc, srv)
}

func _CosmosIndexer_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosmosIndexerServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/querier.CosmosIndexer/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosmosIndexerServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosmosIndexer_GetBlockStreamFrom_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CosmosIndexerServer).GetBlockStreamFrom(&cosmosIndexerGetBlockStreamFromServer{stream})
}

type CosmosIndexer_GetBlockStreamFromServer interface {
	Send(*GetBlockResponse) error
	Recv() (*GetBlockRequest, error)
	grpc.ServerStream
}

type cosmosIndexerGetBlockStreamFromServer struct {
	grpc.ServerStream
}

func (x *cosmosIndexerGetBlockStreamFromServer) Send(m *GetBlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cosmosIndexerGetBlockStreamFromServer) Recv() (*GetBlockRequest, error) {
	m := new(GetBlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CosmosIndexer_ServiceDesc is the grpc.ServiceDesc for CosmosIndexer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CosmosIndexer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "querier.CosmosIndexer",
	HandlerType: (*CosmosIndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _CosmosIndexer_GetBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlockStreamFrom",
			Handler:       _CosmosIndexer_GetBlockStreamFrom_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "querier.proto",
}